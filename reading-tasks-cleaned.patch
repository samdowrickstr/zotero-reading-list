diff --git a/README.md b/README.md
index a1079a2d9683d09649f901ed6aeb35d1602b9a55..e1821d9723f934bf05cde76be069ed1f9937a7c7 100644
--- a/README.md
+++ b/README.md
@@ -1,35 +1,36 @@
 # Zotero Reading List

 ![downloads](<https://img.shields.io/github/downloads/dominic-dallosto/zotero-reading-list/latest/zotero-reading-list.xpi?style=flat-square&label=Downloads%20(latest%20version)>)

 An extension for Zotero that allows setting the read status of items.

 - default read statuses are: `⭐ New`, `📙 To Read`, `📖 In Progress`, `📗 Read`, or `📕 Not Reading`
 - custom read statuses are also supported
 - newly added items can be automatically labelled
 - an item's read status can be automatically updated when opening its attached PDF
+- record per-item reading tasks (modules, units, chapters, pages) and view progress

 ![windows dark theme overview](https://github.com/Dominic-DallOsto/zotero-reading-list/assets/26859884/e35ef424-02cd-4bec-8866-3e1d30c9aadf)

 Change an item's status by right clicking or by using the shortcut keys Alt+1 to Alt+5 (supports multiple items at once).

 ![right click menu](https://github.com/Dominic-DallOsto/zotero-reading-list/assets/26859884/10c46660-445d-4591-ad99-777fe58f788f)

 You can also remove an item's read status through the right click menu or with the shortcut Alt+0.

 ## Installation

 | Zotero version | Extension version to use                                                              |
 | -------------- | ------------------------------------------------------------------------------------- |
 | 6              | [v0.3.2](https://github.com/Dominic-DallOsto/zotero-reading-list/releases/tag/v0.3.2) |
 | 7.0            | [v1.5.8](https://github.com/Dominic-DallOsto/zotero-reading-list/releases/tag/v1.5.8) |
 | 7.1            | [Latest](https://github.com/Dominic-DallOsto/zotero-reading-list/releases/latest)     |

 1. Download the latest release based on your Zotero version from the table above
 2. Save the .xpi file (in Firefox, Right click -> Save Link As)
 3. Install in Zotero (Tools -> Plugins -> Gear icon in the top right -> Install Plugin From File -> Select the .xpi file you downloaded)
 4. Restart Zotero to ensure proper initialisation of the Plugin
 5. Right click on the item pane column header and enable the Read Status column (see below)

 ![image](https://github.com/Dominic-DallOsto/zotero-reading-list/assets/26859884/e0dcc5b3-ffee-4120-96c8-81e6903d30b7)

diff --git a/addon/locale/en-US/addon.ftl b/addon/locale/en-US/addon.ftl
index cfc35c33cef195ea07d653c38bf1d0067700df5c..9deaf56f2068e031d5fe44beadf459c2991450bf 100644
--- a/addon/locale/en-US/addon.ftl
+++ b/addon/locale/en-US/addon.ftl
@@ -1,16 +1,19 @@
 menupopup-label = Read Status
 read-status = Read Status
 status-none = None
 status-new = New
 status-to_read = To Read
 status-in_progress = In Progress
 status-read = Read
 status-not_reading = Not Reading
 prefs-title = Reading List

 duplicate-status-names-title = Duplicate Custom Reading Statuses
 duplicate-status-names-description = Two or more custom reading status names are the same. This isn't supported. Please ensure all of your custom reading status names are unique.
 invalid-status-names-title = Custom Reading Statuses Contains Invalid Characters
 invalid-status-names-description = Custom reading statuses and icons cannot contain the characters : ; or |. Please remove these characters.

-autolabelnewitems-disabled = Disabled
\ No newline at end of file
+autolabelnewitems-disabled = Disabled
+reading-tasks-menu = Show Reading Tasks
+reading-tasks-title = Reading Tasks
+reading-tasks-none = No reading tasks recorded
diff --git a/src/modules/overlay.ts b/src/modules/overlay.ts
index a9fd7419a8a3e0e93680f3e291daf3365a005cc7..aa6466ec10b7ffe66b13eb130e3c602ecf9af4ec 100644
--- a/src/modules/overlay.ts
+++ b/src/modules/overlay.ts
@@ -1,42 +1,43 @@
 import { MenuitemOptions } from "zotero-plugin-toolkit/dist/managers/menu";
 import { config } from "../../package.json";
 import { getString } from "../utils/locale";
 import { patch as $patch$, unpatch as $unpatch$ } from "../utils/patcher";
 import {
 	getPref,
 	setPref,
 	clearPref,
 	initialiseDefaultPref,
 	getPrefGlobalName,
 } from "../utils/prefs";
 import {
 	getItemExtraProperty,
 	setItemExtraProperty,
 	clearItemExtraProperty,
 	removeFieldValueFromExtraData,
 } from "../utils/extraField";
+import { getReadingTasks, tasksToString } from "./reading-tasks";

 const READ_STATUS_COLUMN_ID = "readstatus";
 const READ_STATUS_EXTRA_FIELD = "Read_Status";
 const READ_DATE_EXTRA_FIELD = "Read_Status_Date";

 export const DEFAULT_STATUS_NAMES = [
 	"New",
 	"To Read",
 	"In Progress",
 	"Read",
 	"Not Reading",
 ];
 export const DEFAULT_STATUS_ICONS = ["⭐", "📙", "📖", "📗", "📕"];

 export const DEFAULT_STATUS_CHANGE_FROM = ["New", "To Read"];
 export const DEFAULT_STATUS_CHANGE_TO = ["In Progress", "In Progress"];

 export const SHOW_ICONS_PREF = "show-icons"; // deprecated
 export const READ_STATUS_FORMAT_PREF = "read-status-format";
 export const READ_STATUS_FORMAT_HEADER_SHOW_ICON =
 	"readstatuscolumn-format-header-showicon";
 export const LABEL_NEW_ITEMS_PREF = "label-new-items";
 export const LABEL_NEW_ITEMS_PREF_DISABLED = "|none|";
 export const LABEL_ITEMS_WHEN_OPENING_FILE_PREF =
 	"label-items-when-opening-file";
@@ -70,50 +71,69 @@ function setItemsReadStatus(items: Zotero.Item[], statusName: string) {
 	for (const item of items) {
 		setItemReadStatus(item, statusName);
 	}
 }

 function setSelectedItemsReadStatus(statusName: string) {
 	setItemsReadStatus(getSelectedItems(), statusName);
 }

 function clearSelectedItemsReadStatus() {
 	const items = getSelectedItems();
 	for (const item of items) {
 		clearItemExtraProperty(item, READ_STATUS_EXTRA_FIELD);
 		clearItemExtraProperty(item, READ_DATE_EXTRA_FIELD);
 		void item.saveTx();
 	}
 }

 /**
  * Return selected regular items
  */
 function getSelectedItems() {
 	return ZoteroPane.getSelectedItems().filter((item) => item.isRegularItem());
 }

+function showReadingTasks() {
+	const items = getSelectedItems();
+	if (!items.length) {
+		return;
+	}
+	const lines: string[] = [];
+	for (const item of items) {
+		const tasks = getReadingTasks(item);
+		if (tasks.length) {
+			lines.push(item.getField("title"));
+			lines.push(tasksToString(tasks));
+		}
+	}
+	const message = lines.length
+		? lines.join("\n")
+		: getString("reading-tasks-none");
+	Services.prompt.alert(null, getString("reading-tasks-title"), message);
+}
+
 export const FORBIDDEN_PREF_STRING_CHARACTERS = new Set(":;|");

 export function prefStringToList(prefString: string) {
 	const [statusString, iconString] = prefString.split("|");
 	return [statusString.split(";"), iconString.split(";")];
 }

 export function listToPrefString(stringList: string[], iconList: string[]) {
 	return stringList.join(";") + "|" + iconList.join(";");
 }

 export default class ZoteroReadingList {
 	itemAddedListenerID?: string;
 	fileOpenedListenerID?: string;
 	itemTreeReadStatusColumnId?: string | false;
 	preferenceUpdateObservers?: symbol[];
 	statusNames: string[];
 	statusIcons: string[];

 	constructor() {
 		this.initialiseDefaultPreferences();
 		[this.statusNames, this.statusIcons] = prefStringToList(
 			getPref(STATUS_NAME_AND_ICON_LIST_PREF)! as string,
 		);

@@ -366,63 +386,66 @@ export default class ZoteroReadingList {

 	addPreferencesMenu() {
 		const prefOptions = {
 			pluginID: config.addonID,
 			src: rootURI + "chrome/content/preferences.xhtml",
 			label: getString("prefs-title"),
 			image: `chrome://${config.addonRef}/content/icons/favicon.png`,
 			defaultXUL: true,
 		};
 		void Zotero.PreferencePanes.register(prefOptions);
 	}

 	removePreferenceMenu() {
 		Zotero.PreferencePanes.unregister(config.addonID);
 	}

 	addRightClickMenuPopup() {
 		ztoolkit.Menu.register("item", {
 			id: "zotero-reading-list-right-click-item-menu",
 			tag: "menu",
 			label: getString("menupopup-label"),
 			children: [
 				{
 					tag: "menuitem",
 					label: getString("status-none"),
-					commandListener: (event) =>
-						void clearSelectedItemsReadStatus(),
+					commandListener: () => void clearSelectedItemsReadStatus(),
 				} as MenuitemOptions,
-			].concat(
-				this.statusNames.map((status_name: string) => {
+				...this.statusNames.map((status_name: string) => {
 					return {
 						tag: "menuitem",
 						label: this.formatStatusName(status_name),
-						commandListener: (event) =>
+						commandListener: () =>
 							setSelectedItemsReadStatus(status_name),
 					};
 				}),
-			),
+				{
+					tag: "menuitem",
+					label: getString("reading-tasks-menu"),
+					commandListener: () => showReadingTasks(),
+				},
+			],
 			getVisibility: (element, event) => {
 				return getSelectedItems().length > 0;
 			},
 		});
 	}

 	removeRightClickMenu() {
 		ztoolkit.Menu.unregister("zotero-reading-list-right-click-item-menu");
 	}

 	addNewItemLabeller() {
 		const addItemHandler = (
 			action: _ZoteroTypes.Notifier.Event,
 			type: _ZoteroTypes.Notifier.Type,
 			ids: string[] | number[],
 			extraData: _ZoteroTypes.anyObj,
 		) => {
 			if (action == "add") {
 				const items = Zotero.Items.get(ids).filter((item) =>
 					item.isRegularItem(),
 				);

 				setItemsReadStatus(
 					items,
 					getPref(LABEL_NEW_ITEMS_PREF)! as string,
diff --git a/src/modules/reading-tasks.ts b/src/modules/reading-tasks.ts
new file mode 100644
index 0000000000000000000000000000000000000000..eec138776e530c88b7d1cc12f5dee635a781ed3a
--- /dev/null
+++ b/src/modules/reading-tasks.ts
@@ -0,0 +1,56 @@
+export interface ReadingTask {
+	module: string;
+	unit: string;
+	chapter?: string;
+	pages?: string;
+	paragraph?: string;
+	done?: boolean;
+}
+
+const READING_TASKS_EXTRA_FIELD = "Reading_Tasks";
+
+import {
+	getItemExtraProperty,
+	setItemExtraProperty,
+} from "../utils/extraField";
+
+export function getReadingTasks(item: Zotero.Item): ReadingTask[] {
+	const extra = getItemExtraProperty(item, READING_TASKS_EXTRA_FIELD);
+	if (extra.length) {
+		try {
+			return JSON.parse(extra[0]) as ReadingTask[];
+		} catch {
+			return [];
+		}
+	}
+	return [];
+}
+
+export function setReadingTasks(item: Zotero.Item, tasks: ReadingTask[]): void {
+	setItemExtraProperty(
+		item,
+		READING_TASKS_EXTRA_FIELD,
+		JSON.stringify(tasks),
+	);
+	void item.saveTx();
+}
+
+export function markTaskAsDone(item: Zotero.Item, index: number): void {
+	const tasks = getReadingTasks(item);
+	if (tasks[index]) {
+		tasks[index].done = true;
+		setReadingTasks(item, tasks);
+	}
+}
+
+export function tasksToString(tasks: ReadingTask[]): string {
+	return tasks
+		.map((t, idx) => {
+			const details = [t.module, t.unit, t.chapter, t.pages, t.paragraph]
+				.filter(Boolean)
+				.join(" > ");
+			const status = t.done ? "✔" : "✘";
+			return `${idx + 1}. ${details} - ${status}`;
+		})
+		.join("\n");
+}
